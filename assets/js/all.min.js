const t={components:{settings:null,building:null,elevatorController:null,elevatorScheduler:null,emergencyHandler:null},init:function(){this.initComponents(),this.setupEventListeners(),console.log("Elevator Control System initialized")},initComponents:function(){try{this.components.settings=window.settings,this.createModels(),this.createControllers(),console.log("Components successfully initialized")}catch(t){console.error("Error initializing components: "+t.message),console.error(t)}},createModels:function(){this.components.building=new e({floorCount:this.components.settings.getFloorCount(),elevatorCount:this.components.settings.getElevatorCount()}),console.log("Model objects created")},createControllers:function(){this.components.elevatorScheduler=new s({building:this.components.building}),this.components.elevatorController=new i({building:this.components.building,scheduler:this.components.elevatorScheduler,settings:this.components.settings}),this.components.emergencyHandler=new r({building:this.components.building,elevatorController:this.components.elevatorController}),console.log("Controllers created")},setupEventListeners:function(){$(".floor-button").on("click",(t=>{const e=parseInt($(t.currentTarget).data("floor")),o=$(t.currentTarget).data("direction");console.log(`Elevator call: floor ${e}, direction ${o}`),this.components.elevatorController.callElevator(e,o)})),$(".elevator-floor-button").on("click",(t=>{const e=$(t.currentTarget).data("elevator"),o=parseInt($(t.currentTarget).data("floor"));console.log(`Destination selected: elevator ${e}, floor ${o}`),this.components.elevatorController.selectDestination(e,o)})),$(".emergency-button").on("click",(t=>{const e=$(t.currentTarget).data("elevator");console.warn(`Emergency: elevator ${e}`),this.components.emergencyHandler.triggerEmergency(e)})),$(".door-open-button").on("click",(t=>{const e=$(t.currentTarget).data("elevator");console.log(`Opening doors: elevator ${e}`),this.components.elevatorController.openDoor(e)})),$(".door-close-button").on("click",(t=>{const e=$(t.currentTarget).data("elevator");console.log(`Closing doors: elevator ${e}`),this.components.elevatorController.closeDoor(e)})),$(".bell-button").on("click",(t=>{const e=$(t.currentTarget).data("elevator");console.log(`Bell: elevator ${e}`),this.components.elevatorController.playBellSound(e)})),$("#reset-system").on("click",(()=>{this.resetSystem()})),console.log("Event listeners set up")},resetSystem:function(){this.components.building.reset(),this.components.elevatorController.reset(),this.components.emergencyHandler.reset(),this.components.elevatorScheduler.reset(),console.log("System reset complete")}};$(document).ready((function(){$("#current-year").text((new Date).getFullYear()),t.init()}));class e{constructor(t){this.floorCount=t.floorCount||7,this.elevatorCount=t.elevatorCount||2,this.floors=[];for(let t=0;t<this.floorCount;t++)this.floors.push(new n({number:t,minFloor:0,maxFloor:this.floorCount-1,hasUpButton:t<this.floorCount-1,hasDownButton:t>0}));this.elevators={},this.elevators.A=new o({id:"A",currentFloor:0,minFloor:0,maxFloor:this.floorCount-1}),this.elevators.B=new o({id:"B",currentFloor:this.floorCount-1,minFloor:0,maxFloor:this.floorCount-1}),this.events={},this._setupElevatorEvents(),console.log("Building initialized with "+this.floorCount+" floors and "+this.elevatorCount+" elevators")}_setupElevatorEvents(){Object.values(this.elevators).forEach((t=>{t.on("stateChanged",(t=>{this._triggerEvent("elevatorStateChanged",t)})),t.on("floorChanged",(t=>{this._triggerEvent("elevatorFloorChanged",t)})),t.on("doorsOpened",(t=>{this._triggerEvent("elevatorDoorsOpened",t)})),t.on("doorsClosed",(t=>{this._triggerEvent("elevatorDoorsClosed",t)}))}))}getFloors(){return this.floors}getFloor(t){return this.floors.find((e=>e.number===t))}getElevators(){return this.elevators}getElevator(t){return this.elevators[t]}callElevator(t,e){if(t<0||t>=this.floorCount)return console.error(`Invalid floor number: ${t}`),!1;if("up"!==e&&"down"!==e)return console.error(`Invalid direction: ${e}`),!1;const o=Object.values(this.elevators).filter((e=>e.getCurrentFloor()===t&&e.areDoorsOpen()));if(o.length>0)return console.debug(`Elevator already at floor ${t} with doors open`),$(`#elevator-${o[0].id}`).addClass("elevator-arrive-flash"),setTimeout((()=>{$(`#elevator-${o[0].id}`).removeClass("elevator-arrive-flash")}),500),!0;const n=this.getFloor(t);return"up"===e?n.setUpButtonState(!0):n.setDownButtonState(!0),this._triggerEvent("elevatorCalled",{floor:t,direction:e}),!0}findClosestElevator(t,e){const o=Object.values(this.elevators).filter((t=>!t.isInEmergency));if(0===o.length)return console.warn("No available elevators"),null;const n=o.map((o=>{const n=Math.abs(o.getCurrentFloor()-t),i=o.isIdle()||o.getDirection()===e||null===o.getDirection();return{elevator:o,distance:n,isIdleOrRightDirection:i}})),i=n.filter((t=>t.isIdleOrRightDirection));return i.length>0?(i.sort(((t,e)=>t.distance-e.distance)),i.length>=2&&i[0].distance===i[1].distance?i[0].elevator.getCurrentFloor()<=i[1].elevator.getCurrentFloor()?i[0].elevator:i[1].elevator:i[0].elevator):(n.sort(((t,e)=>t.distance-e.distance)),n.length>=2&&n[0].distance===n[1].distance?n[0].elevator.getCurrentFloor()<=n[1].elevator.getCurrentFloor()?n[0].elevator:n[1].elevator:n[0].elevator)}on(t,e){this.events[t]||(this.events[t]=[]),this.events[t].push(e)}_triggerEvent(t,e){this.events[t]&&this.events[t].forEach((t=>{t({building:this,...e})}))}reset(){this.floors.forEach((t=>t.reset())),this.elevators.A.reset(0),this.elevators.B.reset(this.floorCount-1),console.info("Building reset to initial state"),this._triggerEvent("buildingReset")}}class o{constructor(t){this.id=t.id||"A",this.currentFloor=t.currentFloor||0,this.maxFloor=t.maxFloor||6,this.minFloor=t.minFloor||0,this.state="IDLE",this.direction=null,this.doorsOpen=!1,this.destinations=[],this.nextDestination=null,this.isInEmergency=!1,this.events={}}getState(){return this.state}getCurrentFloor(){return this.currentFloor}getDirection(){return this.direction}isIdle(){return"IDLE"===this.state}isMoving(){return"MOVING_UP"===this.state||"MOVING_DOWN"===this.state}areDoorsOpen(){return this.doorsOpen}addDestination(t){return t<this.minFloor||t>this.maxFloor?(console.error(`Invalid destination floor: ${t}`),!1):this.destinations.includes(t)?(console.log(`Floor ${t} already in destinations`),!1):this.isInEmergency?(console.warn(`Elevator ${this.id} cannot accept new destinations in ${this.state} state`),!1):t!==this.currentFloor||this.doorsOpen||"DOOR_OPENING"===this.state?(this.destinations.push(t),this._sortDestinations(),null===this.nextDestination&&this.destinations.length>0&&(this.nextDestination=this.destinations[0],this._determineDirection()),$(`.elevator-floor-button[data-elevator="${this.id}"][data-floor="${t}"]`).addClass("active"),console.log(`Floor ${t} added to elevator ${this.id} destinations`),this._triggerEvent("destinationAdded",{floor:t}),!0):(this.openDoors(),!0)}_sortDestinations(){if(null===this.direction&&this.destinations.length>0&&this._determineDirection(),"up"===this.direction){const t=this.destinations.filter((t=>t>this.currentFloor)).sort(((t,e)=>t-e)),e=this.destinations.filter((t=>t<this.currentFloor)).sort(((t,e)=>t-e));this.destinations=[...t,...e]}else if("down"===this.direction){const t=this.destinations.filter((t=>t<this.currentFloor)).sort(((t,e)=>e-t)),e=this.destinations.filter((t=>t>this.currentFloor)).sort(((t,e)=>e-t));this.destinations=[...t,...e]}this.destinations=this.destinations.filter((t=>t!==this.currentFloor)),this.destinations.length>0?this.nextDestination=this.destinations[0]:this.nextDestination=null}_determineDirection(){0!==this.destinations.length?this.nextDestination>this.currentFloor?this.direction="up":this.nextDestination<this.currentFloor&&(this.direction="down"):this.direction=null}clearDestinations(){$(`.elevator-floor-button[data-elevator="${this.id}"]`).removeClass("active"),this.destinations=[],this.nextDestination=null,this.direction=null,console.log(`Elevator ${this.id} destinations cleared`),this._triggerEvent("destinationsCleared")}setState(t){console.log(`Elevator ${this.id} state change: ${this.state} -> ${t}`);const e=this.state;switch(this.state=t,t){case"IDLE":this.direction=null;break;case"MOVING_UP":this.direction="up";break;case"MOVING_DOWN":this.direction="down";break;case"LOADING":this.doorsOpen=!0;break;case"EMERGENCY":this.isInEmergency=!0,this.clearDestinations()}this._updateDOMState(),this._triggerEvent("stateChanged",{oldState:e,newState:t,floor:this.currentFloor})}_updateDOMState(){const t=$(`#elevator-${this.id}`);t.length&&(t.attr("data-state",this.state),t.find(".elevator-status").text(this.state),t.find(".seven-segment").text(this.currentFloor),this.doorsOpen?t.addClass("doors-open"):t.removeClass("doors-open"))}moveToFloor(t){if(t<this.minFloor||t>this.maxFloor)return console.error(`Invalid floor: ${t}`),!1;if(t===this.currentFloor)return console.log(`Elevator ${this.id} already at floor ${t}`),!0;if(this.isInEmergency)return console.warn(`Elevator ${this.id} cannot move in ${this.state} state`),!1;const e=t>this.currentFloor?"up":"down";this.setState("up"===e?"MOVING_UP":"MOVING_DOWN"),this.direction=e;const o=this.currentFloor;return this.currentFloor=t,this._updateDOMPosition(),console.log(`Elevator ${this.id} moving from floor ${o} to ${t}`),this._triggerEvent("floorChanged",{oldFloor:o,newFloor:t,direction:e}),!0}_updateDOMPosition(){const t=$(`#elevator-${this.id}`);t.length&&(t.attr("data-floor",this.currentFloor),window.innerWidth<=992?t.css({left:`calc(${this.currentFloor} * (100% / 7))`,bottom:"0"}):t.css({left:"0",bottom:`calc(${this.currentFloor} * var(--floor-height))`}))}openDoors(){this.doorsOpen||"DOOR_OPENING"===this.state||(this.playSound("doorOpen"),this.setState("DOOR_OPENING"),setTimeout((()=>{this.doorsOpen=!0,this._updateDOMState(),this.setState("LOADING"),this._triggerEvent("doorsOpened",{floor:this.currentFloor})}),window.settings?window.settings.getDoorAnimationTime():700))}closeDoors(){this.doorsOpen&&"DOOR_CLOSING"!==this.state&&(this.playSound("doorClose"),this.setState("DOOR_CLOSING"),setTimeout((()=>{this.doorsOpen=!1,this._updateDOMState(),this.destinations.length>0?this._processNextDestination():this.setState("IDLE"),this._triggerEvent("doorsClosed",{floor:this.currentFloor})}),window.settings?window.settings.getDoorAnimationTime():700))}_processNextDestination(){if(0===this.destinations.length)return this.nextDestination=null,void this.setState("IDLE");this.nextDestination=this.destinations[0],this.moveToFloor(this.nextDestination),this.destinations.shift(),0===this.destinations.length&&(this.nextDestination=null)}setEmergency(t){t?(this.isInEmergency=!0,this.setState("EMERGENCY")):(this.isInEmergency=!1,this.setState("IDLE")),this._triggerEvent("emergencyChanged",{isEmergency:t})}playSound(t){try{const e=new(window.AudioContext||window.webkitAudioContext),o=e.createOscillator(),n=e.createGain();switch(t){case"doorOpen":o.type="sine",o.frequency.setValueAtTime(300,e.currentTime),n.gain.setValueAtTime(.3,e.currentTime),n.gain.exponentialRampToValueAtTime(.01,e.currentTime+.5),o.start(),o.stop(e.currentTime+.5);break;case"doorClose":o.type="sine",o.frequency.setValueAtTime(200,e.currentTime),n.gain.setValueAtTime(.3,e.currentTime),n.gain.exponentialRampToValueAtTime(.01,e.currentTime+.5),o.start(),o.stop(e.currentTime+.5);break;case"bell":o.type="sine",o.frequency.setValueAtTime(1e3,e.currentTime),n.gain.setValueAtTime(.5,e.currentTime),n.gain.exponentialRampToValueAtTime(.01,e.currentTime+1),o.start(),o.stop(e.currentTime+1);break;case"arrival":o.type="sine",o.frequency.setValueAtTime(800,e.currentTime),o.frequency.setValueAtTime(1e3,e.currentTime+.2),n.gain.setValueAtTime(.4,e.currentTime),n.gain.exponentialRampToValueAtTime(.01,e.currentTime+.4),o.start(),o.stop(e.currentTime+.4);break;case"emergency":o.type="square",o.frequency.setValueAtTime(800,e.currentTime),n.gain.setValueAtTime(.5,e.currentTime);for(let t=0;t<5;t++)o.frequency.setValueAtTime(800,e.currentTime+.4*t),o.frequency.setValueAtTime(600,e.currentTime+.4*t+.2),n.gain.setValueAtTime(.5,e.currentTime+.4*t),n.gain.setValueAtTime(.3,e.currentTime+.4*t+.2);o.connect(n),n.connect(e.destination),o.start(),o.stop(e.currentTime+2)}o.connect(n),n.connect(e.destination)}catch(t){console.error("Error playing sound:",t)}}on(t,e){this.events[t]||(this.events[t]=[]),this.events[t].push(e)}_triggerEvent(t,e){this.events[t]&&this.events[t].forEach((t=>{t({elevator:this,...e})}))}reset(t){this.clearDestinations(),this.state="IDLE",this.direction=null,this.doorsOpen=!1,this.isInEmergency=!1,void 0!==t&&(this.currentFloor=t),this._updateDOMPosition(),this._updateDOMState(),console.log(`Elevator ${this.id} reset to floor ${this.currentFloor}`),this._triggerEvent("reset",{floor:this.currentFloor})}}class n{constructor(t){this.number=t.number||0,this.upButtonPressed=!1,this.downButtonPressed=!1,this.hasUpButton=void 0!==t.hasUpButton?t.hasUpButton:this.number<t.maxFloor,this.hasDownButton=void 0!==t.hasDownButton?t.hasDownButton:this.number>t.minFloor,this.elevatorIndicators={},this._initDom()}_initDom(){const t=$(`.floor[data-floor="${this.number}"]`);t.length&&(this.hasUpButton||t.find(".up-button").hide(),this.hasDownButton||t.find(".down-button").hide())}setUpButtonState(t){this.upButtonPressed=t,$(`.floor[data-floor="${this.number}"] .up-button`).toggleClass("active",t),console.log(`Floor ${this.number} up button ${t?"pressed":"released"}`)}setDownButtonState(t){this.downButtonPressed=t,$(`.floor[data-floor="${this.number}"] .down-button`).toggleClass("active",t),console.log(`Floor ${this.number} down button ${t?"pressed":"released"}`)}setElevatorIndicator(t,e){this.elevatorIndicators[t]=e;const o=$(`.floor[data-floor="${this.number}"] .direction-indicator[data-elevator="${t}"]`);o.find(".indicator").removeClass("active"),"up"===e?o.find(".up-indicator").addClass("active"):"down"===e&&o.find(".down-indicator").addClass("active"),console.log(`Floor ${this.number} elevator ${t} indicator set to ${e||"none"}`)}reset(){this.upButtonPressed=!1,this.downButtonPressed=!1,this.elevatorIndicators={};const t=$(`.floor[data-floor="${this.number}"]`);t.find(".floor-button").removeClass("active"),t.find(".indicator").removeClass("active"),console.log(`Floor ${this.number} reset`)}}class i{constructor(t){this.building=t.building,this.scheduler=t.scheduler,this.settings=t.settings,this.timers={},this._setupEventListeners()}_setupEventListeners(){this.building.on("elevatorStateChanged",(t=>{this._handleElevatorStateChange(t.elevator,t.oldState,t.newState)})),this.building.on("elevatorFloorChanged",(t=>{this._handleElevatorFloorChange(t.elevator,t.oldFloor,t.newFloor)})),$(window).on("resize",(()=>{this.updateElevatorPositions()}))}callElevator(t,e){this.building.callElevator(t,e)}selectDestination(t,e){const o=this.building.getElevator(t);return o?o.isInEmergency||o.isOverloaded?(console.warn(`Elevator ${t} cannot accept destination in ${o.getState()} state`),!1):($(`.elevator-floor-button[data-elevator="${t}"][data-floor="${e}"]`).addClass("active"),o.addDestination(e),o.isIdle()&&o._processNextDestination(),!0):(console.error(`Elevator ${t} not found`),!1)}openDoor(t){const e=this.building.getElevator(t);return e?!(e.isMoving()||e.areDoorsOpen()||e.isInEmergency||"DOOR_OPENING"===e.getState())&&(e.openDoors(),!0):(console.error(`Elevator ${t} not found`),!1)}closeDoor(t){const e=this.building.getElevator(t);return e?!(e.isMoving()||!e.areDoorsOpen()||e.isInEmergency||"DOOR_CLOSING"===e.getState())&&(e.closeDoors(),!0):(console.error(`Elevator ${t} not found`),!1)}_handleElevatorStateChange(t,e,o){switch(o){case"MOVING_UP":case"MOVING_DOWN":this._updateFloorDirectionIndicators(t);break;case"IDLE":this._clearFloorDirectionIndicators(t),this.scheduler&&this.scheduler._checkPendingCalls();break;case"LOADING":this._setDoorCloseTimer(t)}console.log(`Elevator ${t.id} state changed from ${e} to ${o}`)}_handleElevatorFloorChange(t,e,o){t.destinations.includes(o)&&$(`.elevator-floor-button[data-elevator="${t.id}"][data-floor="${o}"]`).removeClass("active");const n=this.building.getFloor(o);n&&(n.setUpButtonState(!1),n.setDownButtonState(!1)),t.nextDestination===o&&(t.playSound("arrival"),setTimeout((()=>{t.openDoors()}),200)),this._updateFloorDirectionIndicators(t),console.log(`Elevator ${t.id} moved from floor ${e} to ${o}`)}_updateFloorDirectionIndicators(t){if(this._clearFloorDirectionIndicators(t),t.getDirection()){const e=this.building.getFloor(t.getCurrentFloor());e&&e.setElevatorIndicator(t.id,t.getDirection())}}_clearFloorDirectionIndicators(t){this.building.getFloors().forEach((e=>{e.setElevatorIndicator(t.id,null)}))}_setDoorCloseTimer(t){this.timers[t.id]&&clearTimeout(this.timers[t.id]);const e=this.settings?this.settings.getDoorOpenTime():3e3;this.timers[t.id]=setTimeout((()=>{t.closeDoors()}),e)}updateElevatorPositions(){Object.values(this.building.getElevators()).forEach((t=>{t._updateDOMPosition()}))}reset(){Object.values(this.timers).forEach((t=>clearTimeout(t))),this.timers={},$(".elevator-floor-button").removeClass("active"),console.log("Elevator controller reset")}playBellSound(t){const e=this.building.getElevator(t);e&&e.playSound("bell")}}class s{constructor(t){this.building=t.building,this.pendingCalls=[],this._setupEventListeners()}_setupEventListeners(){this.building.on("elevatorCalled",(t=>{this.scheduleElevator(t.floor,t.direction)})),this.building.on("elevatorFloorChanged",(t=>{this._handleElevatorFloorChange(t.elevator,t.newFloor)})),this.building.on("elevatorDoorsClosed",(t=>{this._checkPendingCalls()}))}scheduleElevator(t,e){console.log(`Scheduling elevator for floor ${t}, direction ${e}`);if(this.pendingCalls.find((o=>o.floor===t&&o.direction===e)))return void console.log(`Call for floor ${t}, direction ${e} already pending`);const o=this.building.findClosestElevator(t,e);if(!o)return this.pendingCalls.push({floor:t,direction:e}),void console.warn(`No available elevator, added to pending calls: floor ${t}, direction ${e}`);if(o.getCurrentFloor()===t&&!o.areDoorsOpen()){o.openDoors();const n=this.building.getFloor(t);return"up"===e?n.setUpButtonState(!1):n.setDownButtonState(!1),void console.log(`Elevator ${o.id} already at floor ${t}, opening doors`)}o.addDestination(t),o.isIdle()&&o._processNextDestination(),console.log(`Scheduled elevator ${o.id} for floor ${t}, direction ${e}`)}_handleElevatorFloorChange(t,e){const o=this.pendingCalls.filter((t=>t.floor===e));if(o.length>0){const t=this.building.getFloor(e);o.forEach((e=>{"up"===e.direction?t.setUpButtonState(!1):t.setDownButtonState(!1)})),this.pendingCalls=this.pendingCalls.filter((t=>t.floor!==e)),console.log(`Removed calls for floor ${e} from pending calls`)}}_checkPendingCalls(){if(0===this.pendingCalls.length)return;console.log(`Checking ${this.pendingCalls.length} pending calls`);const t=[];this.pendingCalls.forEach((e=>{const o=this.building.findClosestElevator(e.floor,e.direction);o&&o.isIdle()&&(o.addDestination(e.floor),o._processNextDestination(),t.push(e),console.log(`Assigned pending call: floor ${e.floor}, direction ${e.direction} to elevator ${o.id}`))})),this.pendingCalls=this.pendingCalls.filter((e=>!t.some((t=>t.floor===e.floor&&t.direction===e.direction))))}reset(){this.pendingCalls=[],console.log("Elevator scheduler reset")}}class r{constructor(t){this.building=t.building,this.elevatorController=t.elevatorController}triggerEmergency(t){const e=this.building.getElevator(t);return e?e.isInEmergency?this.cancelEmergency(t):(e.setEmergency(!0),e.playSound("emergency"),$(`.emergency-button[data-elevator="${t}"]`).addClass("active"),console.warn(`Emergency triggered for elevator ${t}`),!0):(console.error(`Elevator ${t} not found`),!1)}cancelEmergency(t){const e=this.building.getElevator(t);return e?(e.setEmergency(!1),$(`.emergency-button[data-elevator="${t}"]`).removeClass("active"),console.info(`Emergency canceled for elevator ${t}`),!0):(console.error(`Elevator ${t} not found`),!1)}reset(){Object.values(this.building.getElevators()).forEach((t=>{t.isInEmergency=!1})),$(".emergency-button").removeClass("active"),console.info("All emergency states reset")}}window.settings=new class{constructor(){this.defaults={elevatorSpeed:5,doorOpenTime:3,floorCount:7,elevatorCount:2,darkMode:!1,timing:{elevatorMoveTime:1e3,doorOpenTime:3e3,doorAnimationTime:700},stateDurations:{doorOpening:700,doorClosing:700,loading:3e3}},this.current={...this.defaults},this.init()}init(){this.setupEventListeners(),this.syncWithCSSVars()}setupEventListeners(){$("#speed-control").val(this.current.elevatorSpeed).on("input",(t=>{this.updateSetting("elevatorSpeed",parseInt($(t.target).val())),this.calculateTimings(),this.updateUIValues()})),$("#door-time-control").val(this.current.doorOpenTime).on("input",(t=>{this.updateSetting("doorOpenTime",parseInt($(t.target).val())),this.calculateTimings(),this.updateUIValues()})),$("#theme-toggle").on("click",(()=>{this.toggleDarkMode()})),$("#reset-system").on("click",(()=>{this.resetToDefaults()}))}updateUIValues(){const t=this.current.elevatorSpeed,e=this.current.timing.elevatorMoveTime/1e3;$("#speed-value").text(`${t} (${e}s)`);const o=this.current.doorOpenTime;$("#door-time-value").text(`${o}s`),this.current.darkMode?$("#theme-toggle").html('<i class="fas fa-sun"></i> Light Mode'):$("#theme-toggle").html('<i class="fas fa-moon"></i> Dark Mode')}syncWithCSSVars(){document.documentElement.style.setProperty("--elevator-transition",`${this.getElevatorTransitionTime()}ms`),document.documentElement.style.setProperty("--door-transition",`${this.current.timing.doorAnimationTime}ms`),document.documentElement.style.setProperty("--door-open-delay",`${this.current.timing.doorOpenTime}ms`)}calculateTimings(){const t=(11-this.current.elevatorSpeed)/5;this.current.timing.elevatorMoveTime=Math.round(1e3*t),this.current.timing.doorOpenTime=1e3*this.current.doorOpenTime,this.current.stateDurations.loading=this.current.timing.doorOpenTime,this.syncWithCSSVars()}updateSetting(t,e){this.current[t]=e}toggleDarkMode(){this.current.darkMode=!this.current.darkMode,$("body").toggleClass("dark-mode",this.current.darkMode),this.updateUIValues()}resetToDefaults(){this.current={...this.defaults},this.calculateTimings(),$("#speed-control").val(this.current.elevatorSpeed),$("#door-time-control").val(this.current.doorOpenTime),$("body").removeClass("dark-mode"),this.updateUIValues(),console.log("Settings reset to defaults")}getElevatorTransitionTime(){return this.current.timing.elevatorMoveTime}getDoorAnimationTime(){return this.current.timing.doorAnimationTime}getDoorOpenTime(){return this.current.timing.doorOpenTime}getLoadingTime(){return this.current.stateDurations.loading}getFloorCount(){return this.current.floorCount}getElevatorCount(){return this.current.elevatorCount}isDarkMode(){return this.current.darkMode}};